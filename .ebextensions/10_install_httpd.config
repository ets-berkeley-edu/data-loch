#
# STEP 1:
# Create the httpd proxy config file to replace the default configuration
#
files:
  '/tmp/data-loch.httpd.conf':
    mode: '000755'
    owner: root
    group: root
    content: |
      # Elastic Beanstalk Managed
      #
      # Elastic Beanstalk managed configuration file
      # Some configuration of httpd can be by placing files in /etc/httpd/conf.d/
      # using Configuration Files.
      # http://docs.amazonwebservices.com/elasticbeanstalk/latest/dg/customize-containers.html
      #
      # Modifications of httpd.conf can be performed using container_commands to modify the staged version
      # located in /tmp/deployment/config/etc#httpd#conf#httpd.conf
      # This file was overwritten during deployment
      # by .ebextensions/02_container_commands.config

      Listen 8080

      ProxyPass /api http://localhost:2000/api retry=0 KeepAlive=On
      ProxyPassReverse /api http://localhost:2000/api
      ProxyPreserveHost On

      DocumentRoot '/var/www/html/data-loch'

      # Indicate that we're forwarding a request that came in over HTTPS.
      RequestHeader set X-Forwarded-Proto "https"

      LogFormat "%h (%{X-Forwarded-For}i) %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined

  # Proxy SSL connections to port 80, to be handled by the Cloud LRS-specific conf above.
  /etc/httpd/conf.d/ssl.conf:
    mode: '000644'
    owner: root
    group: root
    content: |
      LoadModule ssl_module modules/mod_ssl.so
      Listen 443
      <VirtualHost *:443>
        <Proxy *>
          Order deny,allow
          Allow from all
        </Proxy>

        SSLEngine             on
        SSLCertificateFile    "/etc/pki/tls/certs/data_loch_instance.crt"
        SSLCertificateKeyFile "/etc/pki/tls/certs/data_loch_instance.key"
        SSLCipherSuite        EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
        SSLProtocol           All -SSLv2 -SSLv3
        SSLHonorCipherOrder   On
        SSLSessionTickets     Off

        Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
        Header always unset X-Frame-Options
        Header always set X-Content-Type-Options nosniff
        Header set Access-Control-Allow-Origin "*"

        ProxyPass / http://localhost:80/ retry=0
        ProxyPassReverse / http://localhost:80/
        ProxyPreserveHost on
        RequestHeader set X-Forwarded-Proto "https" early

      </VirtualHost>

  # The load balancer expects to find this SSL certificate on EC2 instances. Note that this is a self-signed
  # certificate for the load balancer's benefit only, not the domain-associated certificate that the load
  # balancer presents to users. Get these from S3 la-deploy-configs location.
  # Load-balancer expects this SSL certificate on EC2 instances.
  /etc/pki/tls/certs/data_loch_instance.crt:
    mode: '000400'
    owner: root
    group: root
    content: |
      -----BEGIN CERTIFICATE-----
      MIIENDCCAxwCCQC6i2Gs/tO5yjANBgkqhkiG9w0BAQsFADCB2zELMAkGA1UEBhMC
      VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExETAPBgNVBAcMCEJlcmtlbGV5MSswKQYD
      VQQKDCJVbml2ZXJzaXR5IG9mIENhbGlmb3JuaWEsIEJlcmtlbGV5MSgwJgYDVQQL
      DB9FZHVjYXRpb25hbCBUZWNobm9sb2d5IFNlcnZpY2VzMRwwGgYDVQQDDBNldHMt
      YmVya2VsZXktbGEubmV0MS8wLQYJKoZIhvcNAQkBFiBldHMtYW5hbHl0aWNzQGxp
      c3RzLmJlcmtlbGV5LmVkdTAeFw0xNzEyMDgyMTMxMzFaFw0xOTEyMDgyMTMxMzFa
      MIHbMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTERMA8GA1UEBwwI
      QmVya2VsZXkxKzApBgNVBAoMIlVuaXZlcnNpdHkgb2YgQ2FsaWZvcm5pYSwgQmVy
      a2VsZXkxKDAmBgNVBAsMH0VkdWNhdGlvbmFsIFRlY2hub2xvZ3kgU2VydmljZXMx
      HDAaBgNVBAMME2V0cy1iZXJrZWxleS1sYS5uZXQxLzAtBgkqhkiG9w0BCQEWIGV0
      cy1hbmFseXRpY3NAbGlzdHMuYmVya2VsZXkuZWR1MIIBIjANBgkqhkiG9w0BAQEF
      AAOCAQ8AMIIBCgKCAQEA/uZ5Ee4+AmOUh5tKgn+MHtLw5twLROa3ufTBqr5NthVW
      AvrFvCg/yArQKET57dxuz1AyR95XaDtoYWS+R3qXcIQha0djbE2AlVojpr4KJFqZ
      4gWQx6bZXppKV7AjKPoOljA+fbbCW2chS4TilDlvbXlzWb8vRFRn8tRYTDp5Zmbg
      3NE3sRURnGBIElxFY/CGZZ/Mx75d5AN4/QWwh97+0tcRl1YGH/93NLUSQj6/aB68
      PWz8VS/rsToLey9ss7ET1/e8v2nYaF1nJ+/a3zOoDO7t8uNHLLsflFqqxnz4hU4C
      y8/15B0MXMEIjXMkqm+XEFdGMyZvQz7RGGuNlLNbgQIDAQABMA0GCSqGSIb3DQEB
      CwUAA4IBAQAOsQ1p2lJJpsLkKj+Q8VIuB+ddKIxdaZBW+fCK2WoEzmQwfW35H19S
      AlpbOdyIMNo1hZGC0J+roGJHY5/TohmqLhdjVUXj07tFbUXaJoEPQ/DCtsE86wnc
      Ru3ixIlAPx/58/9dmjPWQHgf2OUlJmHVmauDCQPuKfS2uTZWh1Od9uzPl/mFKaPr
      D1qzksTrtob1ZyxV4HQGXoWRPxVH882vwe0l5aNP/eTEs1Iw6o/7ecEdGfT+MHFH
      +gr0VXEJ719HrAmj6vPU2OmIi26/k+SY0hEL+xTjrRUAj0x4xK54TjuZxLxIGGXb
      uQ/iZK+pMt0CYWv0yGxYwe6JHlo8AslP
      -----END CERTIFICATE-----

  # Get the private key matching the certificate.
  /etc/pki/tls/certs/data_loch_instance.key:
    mode: '000400'
    owner: root
    group: root
    authentication: "S3Auth"
    source: https://s3-us-west-2.amazonaws.com/la-deploy-configs/shared/certificate/la_openssl_private.key
